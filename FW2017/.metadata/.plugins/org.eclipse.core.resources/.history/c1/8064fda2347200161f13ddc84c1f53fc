/*
 * timer.cpp
 *
 *  Created on: Sep 3, 2016
 *      Author: James
 */

#include "timer.hpp"
#include "msp.h"
#include "clocks.h"

namespace Peripherials {
Timer TA0(TIMER_A0, ACLK), TA1(TIMER_A1, ACLK), TA2(TIMER_A2, ACLK), TA3(
TIMER_A3, ACLK);

Timer::Timer(Timer_A_Type* instance, TimerClockSource source) :
		regs(*instance) {
	regs.CTL = (source & (3 << 8)) | (TACLR);
}

void Timer::SetPeriod(float period) {
	switch ((TimerClockSource) (regs.CTL >> 8) & 0x3) {
	/* umm, this is external without a fixed period, so do nothing */
	case TAxCLK:
		break;
		/* Use assumed ACLK value */
	case ACLK:
		/* set the period to the computed value */
		regs.CCR[0] = (uint16_t) ((ACLK * period) + 0.5);
		/* Set the mode to up (to make use of the period) */
		regs.CTL = (regs.CTL & ~(3 << 4)) | (MC__UP);
		break;
	case SMCLK:
		/* set the period to the computed value */
		regs.CCR[0] = (uint16_t) ((SMCLK * period) + 0.5);
		/* Set the mode to up (to make use of the period) */
		regs.CTL = (regs.CTL & ~(3 << 4)) | (MC__UP);
		break;
	}
}
}
