/*
 * uart.cpp
 *
 *  Created on: Sep 10, 2016
 *      Author: James
 */

#include "uart.hpp"
#include "clocks.h"

namespace Peripherials {

Buffers::AutoBuffer<300> A2_rawTx;
Buffers::BaseBuffer A2_txBuffer(A2_rawTx.GetData(), A2_rawTx.GetSize());
Buffers::RollingBuffer A2_txQueue(A2_txBuffer);

Buffers::AutoBuffer<300> A2_rawRx;
Buffers::BaseBuffer A2_rxBuffer(A2_rawRx.GetData(), A2_rawRx.GetSize());

UART UART_A2(*EUSCI_A2, 9600, A2_txQueue, A2_rxBuffer);

UART::UART(EUSCI_A_Type& instance, int baud, Buffers::RollingBuffer backingTx,
		Buffers::BaseBuffer backingRx) :
		regs(instance), txBuffer(backingTx), rxBuffer(backingRx), rxIndex(0) {
	regs.CTLW0 = UCPEN | UCPAR | UCMSB | (1 << 7) | UCSWRST | UCSPB;

	int N = (fSMCLK * 256 / baud);
	int NReg = N / 256;
	int F = (N % 16);
	int FReg = (F / 256);

	regs.BRW = (NReg / 16);
	regs.CTLW0 &= ~UCSWRST;
	regs.MCTLW = ((N % 256) << EUSCI_A_MCTLW_BRS_OFS)
			| (FReg << EUSCI_A_MCTLW_BRF_OFS) | UCOS16;

	regs.IE |= 0x01;
	NVIC_EnableIRQ(EUSCIA2_IRQn);
}

void UART::Send(char c) {
	txBuffer.Enqueue(c);
	regs.IE |= 0x02 | 0x08;
}

void UART::Send(char* str) {
	while (*str != 0) {
		txBuffer.Enqueue(*(str++));
	}
	regs.IE |= 0x02 | 0x08;
}

Buffers::BaseBuffer UART::GetBuffer() {
	return rxBuffer;
}

void UART::ClearBuffer() {
	rxIndex = 0;
}

int UART::GetBufferLength() {
	return rxIndex;
}

void UART::OnInterrupt() {
	switch (regs.IV) {
	case 0:
		// no interrupt (shouldn't occur)
		break;
	case 2:
		if (rxIndex < rxBuffer.GetSize()) {
			rxBuffer.GetData()[rxIndex++] = regs.RXBUF;
		}
		break;
	case 4:
	case 8:
		// TX complete interrupt
		if (!txBuffer.IsEmpty()) {
			regs.TXBUF = txBuffer.Dequeue();
		} else {
			regs.IE &= ~(0x02 | 0x08);
		}
		break;
	}
}

namespace {
extern "C" {
void EUSCIA2_IRQHandler() {
	UART_A2.OnInterrupt();
}
}
}
}

